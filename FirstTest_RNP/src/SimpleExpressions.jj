options
{
static = false;
output_directory = "parser";
debug_parser = true;
}
PARSER_BEGIN(SimpleExpressions)

package parser;

import ast.*;

public class SimpleExpressions
 {
 }
 
PARSER_END(SimpleExpressions)

SKIP :
{
 	" " | "\t" | "\r" | "\n" | < "//" (~["\n"])* "\n" >
}

TOKEN :
{
	< Number : ((["0"-"9"])+ ("." (["0"-"9"])*)?) | ((["0"-"9"])* "." (["0"-"9"])+) >
}

Expression Expression() :
{
	Expression e;
}
{
	e = LarsExpression() ";" // "4+5-6;"   -> "4+5-6"
	{
		return e;
	}
}

//////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////
/////////////////////////!!!!!!!RNP!!!!!!////////////////////////////////////////
/////////////////////////////////////////////////////////////////
 

Expression LarsExpression() :
{
	Expression left, right;
}
{
	// MulExpression (“+” MulExpression)*
	//  | MulExpression (“-” MulExpression)*
	
	////  MulExpression() (("+" | "-") MulExpression())*
	left = YuliaExpression() //"4+5-6" ---> "4" "+5-6"
	  
	 	(
	 	
	 		"+" right = YuliaExpression() { left = new AddExpression( left, right );}
	 	| 	
	 		"-" right = YuliaExpression() { left = new SubExpression( left, right );}
	 	)*
	 	{
	 		return left;
	 	}
}

Expression YuliaExpression() :
{
	Expression left, right;
}
{
	// PrimaryExpression (“*” PrimaryExpression)*
	//  PrimaryExpression (“/” PrimaryExpression)*
	
	////  PrimaryExpression() (("*" | "/") PrimaryExpression())*
	left = PrimaryExpression() //"4+5-6" ---> "4" "+5-6"
	  
	 	(
	 	
	 		"*" right = PrimaryExpression() { left = new MulExpression( left, right );}
	 	| 	
	 		"/" right = PrimaryExpression() { left = new DivExpression( left, right );}
	 	)*
	 	{
	 		return left;
	 	}
}










Expression PrimaryExpression() :
{
	Expression e;
	Token n;
}
{	/*{
	 "(" Expression() ")"
	|
	 "-" Primary()
	|
	 <Number> */
	n = <Number>
	{
		return new NumberExpression( n.image);
	}
	| 
	 "-" e = PrimaryExpression()// ")" //PrimaryExpression() 
	{
		return new UnaryMinusExpression(e);
	}
	|
	"(" e = LarsExpression() ")" //PrimaryExpression() (2)  (3+5)
	{
		return e;
	}
	
	/*
	
	
	"-" e = Primary() ")"
	{
		return new UnaryMinusExpression(e);
	}
	
	
	
	
		| 
	 "-" e = PrimaryExpression() //PrimaryExpression() 
	{
		return e;
	}*/
	
	
} 
