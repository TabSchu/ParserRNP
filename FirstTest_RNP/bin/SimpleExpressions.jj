options
{
	static = false;
	output_directory = "parser";
	// debug_parser = true;
}
PARSER_BEGIN(SimpleExpressions)

package parser;

import ast.*;

public class SimpleExpressions
 {
 }
 
PARSER_END(SimpleExpressions)

SKIP :
{
 	" " | "\t" | "\r" | "\n" | < "//" (~["\n"])* "\n" >
}

TOKEN :
{
	< Number : ((["0"-"9"])+ ("." (["0"-"9"])*)?) | ((["0"-"9"])* "." (["0"-"9"])+) >
}


 
 
Expression Expression() :
{
	Expression e;
}
{
	e = AddFuncExpression() ";" 
	{
		return e;
	}
}



Expression AddFuncExpression() :
{
	Expression left, right;
}
{

	left = MulFuncExpression() 
	  
	 	(
	 	
	 		"+" right = MulFuncExpression() { left = new AddExpression( left, right );}
	 	| 	
	 		"-" right = MulFuncExpression() { left = new SubExpression( left, right );}
	 	)*
	 	{
	 		return left;
	 	}
}

Expression MulFuncExpression() :
{
	Expression left, right;
}
{

	left = PrimaryExpression() 
	  
	 	(
	 	
	 		"*" right = PrimaryExpression() { left = new MulExpression( left, right );}
	 	| 	
	 		"/" right = PrimaryExpression() { left = new DivExpression( left, right );}
	 	)*
	 	{
	 		return left;
	 	}
}



Expression PrimaryExpression() :
{
	Expression e;
	Token n;
}
{	
	n = <Number>
	{
		return new NumberExpression( n.image); // returns Number
	}
	| 
	 "-" e = PrimaryExpression()
	{
		return new UnaryMinusExpression(e); // returns UnaryMinus 
											// e.g. - 3 --> 0 3 -
	}
	|
	"(" e = AddFuncExpression() ")" // calls AddFuncExpression, 
									// returns evaluated result
	{
		return e;
	}	
} 
